#include <bits/stdc++.h>
#define ll long long
#define F first
#define S second
#define mp make_pair
#define pb push_back
#define PI 3.1415926535897932384626433832
#define MOD 1000000007
#define MOD2 1000000009
#define bas 29
#define bas2 19
#define MO 998244353
 
using namespace std;
vector<vector<pair<int,int> > > g(109, vector<pair<int,int> >());
int n, m, u, v, w;
int minCost[109][109];
long long numOfS[109][109];
double betweeness[109];
double dijkstra(int start){
    for(int i = 0; i < 109; i++){
        minCost[start][i] = 1e9;
    }
    numOfS[start][start] = 1;
    minCost[start][start] = 0;
    priority_queue<pair<int,int> > q;
    q.push(mp(minCost[start][start], start));
    while(!q.empty()){
        int node = q.top().second;
        int cost = q.top().first* - 1;
        q.pop();
        for(int i = 0; i < g[node].size(); i++){
            if(cost + g[node][i].second == minCost[start][g[node][i].first]){
                numOfS[start][g[node][i].first] += numOfS[start][node];
            }
            if(cost + g[node][i].second < minCost[start][g[node][i].first]){
                numOfS[start][g[node][i].first] = numOfS[start][node];
                minCost[start][g[node][i].first] = cost + g[node][i].second;
                q.push(mp((cost + g[node][i].second) * -1, g[node][i].first));
            }
        }
    }
    double res = 0;
    for(int i = 0; i < n; i++){
        if(i == start)continue;
        res += minCost[start][i];
    }
    return (n - 1) / res;
}
 
int main(){
    scanf("%d%d", &n, &m);
    for(int i = 0; i < m; i++){
        scanf("%d%d%d", &u, &v, &w);
        g[u].push_back(mp(v, w));
        g[v].push_back(mp(u, w));
    }
    for(int i = 0; i < n; i++){
        printf("%d\n", g[i].size());
    }
    for(int i = 0; i < n; i++){
        printf("%.9f",dijkstra(i));
        printf("\n");
    }
    for(int v = 0; v < n; v++){
        double res = 0;
        for(int i = 0; i < n; i++){
            for(int j = i + 1; j < n; j++){
                if(i == v || j == v)continue;
                if(minCost[i][v] + minCost[v][j] != minCost[i][j])continue;
                res += (numOfS[i][v] * numOfS[v][j])/(numOfS[i][j] * 1.0);
          //      printf("%d %d %lld\n", i, j, numOfS[i][j]);
            }
        }
        printf("%d %.9f\n",v, res);
    }
 
}
